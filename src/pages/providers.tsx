import { NextPage } from "next";
import Header from "$templates/Header";
import { Breadcrumb, Typography, Button, Input } from "antd";
import Link from "next/link";
import { useFormik } from "formik";
import { useState } from "react";
const { Title, Text } = Typography;
import {
  MailOutlined,
  UserOutlined,
  PhoneOutlined,
  EnvironmentOutlined,
} from "@ant-design/icons";
import { useLogin } from "$hooks/useLogin";
import AccessDenied from "$templates/AccessDenied";
import Head from "next/head";
import { api, pageTitle } from "$config/site";
import axios from "axios";
import toast from "react-hot-toast";
import to from "await-to-ts";
import { useAppSelector } from "$hooks/useAppSelector";
import { useAppDispatch } from "$hooks/useAppDispatch";
import { addProvider } from "$store/slices/providersSlice";
import ProvidersTable from "$templates/ProvidersTable";

const Providers: NextPage = () => {
  const dispatch = useAppDispatch();

  const user = useAppSelector((state) => state.user);

  const [isLoggedIn, mounted] = useLogin();
  const [creatingProvider, setCreatingProvider] = useState<boolean>(false);

  const addProviderForm = useFormik({
    initialValues: {
      name: "",
      email: "",
      phone: "",
      address: "",
    },
    validate: (values) => {
      const errors: any = {};

      if (!values.name) {
        errors.name = "El campo Nombre es obligatorio.";
      }

      if (!values.email) {
        errors.email = "El campo Correo Electrónico es obligatorio.";
      }

      if (!values.phone) {
        errors.phone = "El campo Teléfono es obligatorio.";
      }

      if (!values.address) {
        errors.address = "El campo Dirección es obligatorio.";
      }

      if (!values.phone.match(/^\d{8}$/)) {
        errors.phone = "El campo Teléfono debe contener 8 dígitos.";
      }

      if (
        values.email &&
        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(values.email)
      ) {
        errors.email = "Dirección de correo electrónico no válida";
      }

      return errors;
    },
    onSubmit: async (values) => {
      setCreatingProvider(true);
      const [, res] = await to(
        axios.post(
          `${api}/providers/create`,
          {
            email: values.email,
            name: values.name,
            phone: values.phone,
            address: values.address,
          },
          {
            headers: {
              "X-Token": user.token,
            },
          }
        )
      );
      if (res) {
        toast.success("Proveedor creado correctamente", {
          position: "bottom-right",
        });
        dispatch(
          addProvider({
            name: values.name,
            email: values.email,
            phone: values.phone,
            address: values.address,
            id: res.data.id,
          })
        );
        addProviderForm.resetForm();
      }
      setCreatingProvider(false);
    },
    validateOnChange: true,
  });

  return (
    <>
      <Head>
        <title>Proveedores - {pageTitle}</title>

        <meta name="description" content="Generated by create next app" />
        <link rel="icon" type="image/png" href="/favicon.png" />
      </Head>
      <Header />
      <div className="w-full flex flex-col items-center">
        {mounted && (
          <div className="container mb-8">
            {isLoggedIn ? (
              <>
                <div className="h-16 flex items-center w-full">
                  <Breadcrumb>
                    <Breadcrumb.Item>
                      <Link href="/">
                        <a>Inicio</a>
                      </Link>
                    </Breadcrumb.Item>
                    <Breadcrumb.Item>
                      <Link href="/providers">
                        <a>Proveedores</a>
                      </Link>
                    </Breadcrumb.Item>
                  </Breadcrumb>
                </div>
                <div className="flex justify-between mt-5 gap-20 flex-col lg:flex-row">
                  <div className="w-full md:w-96">
                    <Title level={2}>Agregar proveedor</Title>
                    <Text>
                      Completa los campos necesarios para agregar un proveedor.
                    </Text>

                    <div className="mt-10">
                      <div className="flex flex-col">
                        <Input
                          disabled={creatingProvider}
                          status={
                            addProviderForm.touched.name &&
                            addProviderForm.errors.name
                              ? "error"
                              : undefined
                          }
                          type={"text"}
                          name="name"
                          size="large"
                          placeholder="Nombre del proveedor"
                          prefix={<UserOutlined />}
                          onChange={addProviderForm.handleChange}
                          value={addProviderForm.values.name}
                        />
                        <Text className="!text-red-600 mt-1 h-[22px]">
                          {addProviderForm.touched.name &&
                          addProviderForm.errors.name
                            ? addProviderForm.errors.name
                            : undefined}
                        </Text>
                      </div>
                      <div className="flex flex-col">
                        <Input
                          disabled={creatingProvider}
                          status={
                            addProviderForm.touched.email &&
                            addProviderForm.errors.email
                              ? "error"
                              : undefined
                          }
                          type={"email"}
                          name="email"
                          size="large"
                          placeholder="Correo electrónico"
                          prefix={<MailOutlined />}
                          onChange={addProviderForm.handleChange}
                          value={addProviderForm.values.email}
                        />
                        <Text className="!text-red-600 mt-1 h-[22px]">
                          {addProviderForm.touched.email &&
                          addProviderForm.errors.email
                            ? addProviderForm.errors.email
                            : undefined}
                        </Text>
                      </div>
                      <div className="flex flex-col">
                        <Input
                          disabled={creatingProvider}
                          status={
                            addProviderForm.touched.phone &&
                            addProviderForm.errors.phone
                              ? "error"
                              : undefined
                          }
                          type={"tel"}
                          name="phone"
                          size="large"
                          placeholder="Número telefónico "
                          prefix={<PhoneOutlined />}
                          onChange={addProviderForm.handleChange}
                          value={addProviderForm.values.phone}
                        />
                        <Text className="!text-red-600 mt-1 h-[22px]">
                          {addProviderForm.touched.phone &&
                          addProviderForm.errors.phone
                            ? addProviderForm.errors.phone
                            : undefined}
                        </Text>
                      </div>
                      <div className="flex flex-col">
                        <Input
                          disabled={creatingProvider}
                          status={
                            addProviderForm.touched.address &&
                            addProviderForm.errors.address
                              ? "error"
                              : undefined
                          }
                          type={"text"}
                          name="address"
                          size="large"
                          placeholder="Dirección"
                          prefix={<EnvironmentOutlined />}
                          onChange={addProviderForm.handleChange}
                          value={addProviderForm.values.address}
                        />
                        <Text className="!text-red-600 mt-1 h-[22px]">
                          {addProviderForm.touched.address &&
                          addProviderForm.errors.address
                            ? addProviderForm.errors.address
                            : undefined}
                        </Text>
                      </div>
                      <Button
                        size="large"
                        type="primary"
                        loading={creatingProvider}
                        onClick={() => addProviderForm.handleSubmit()}
                      >
                        Agregar proveedor
                      </Button>
                    </div>
                  </div>
                  <div className="w-full lg:w-8/12">
                    <ProvidersTable />
                  </div>
                </div>
              </>
            ) : (
              <div className="flex justify-center items-center w-full min-h-[calc(100vh-4rem)]">
                <AccessDenied />
              </div>
            )}
          </div>
        )}
      </div>
    </>
  );
};

export default Providers;
