/* eslint-disable no-unused-vars */
/* eslint-disable @next/next/no-img-element */
import { NextPage } from "next";
import Header from "$templates/Header";
import { Badge, Breadcrumb, Button, Input, List, Typography } from "antd";
import Link from "next/link";
import { useLogin } from "$hooks/useLogin";
import AccessDenied from "$templates/AccessDenied";
import Head from "next/head";
import { pageTitle } from "$config/site";
import { useAppSelector } from "$hooks/useAppSelector";
import ProductCard from "$molecules/ProductCard";
import { useFormik } from "formik";
import { useCallback, useEffect, useState } from "react";
import {
  CreditCardOutlined,
  ShoppingCartOutlined,
  UserOutlined,
  IdcardOutlined,
} from "@ant-design/icons";
import { Presentation, Product } from "$store/slices/productsSlice";
import CartItem from "$molecules/CartItem";
import { formatCurrency } from "$helpers/formatCurrency";

export interface CartProduct {
  product: Product;
  presentation: Presentation;
  quantity: number;
  subtotal: number;
}

const NewSale: NextPage = () => {
  const [isLoggedIn, mounted] = useLogin();

  const loadingProducts = useAppSelector((state) => state.products.loading);
  const products = useAppSelector((state) => state.products.products);

  const [cartProducts, setCartProducts] = useState<CartProduct[]>([]);

  const addToCart = (product: Product, presentation: Presentation) => {
    setCartProducts((prev) => {
      return [
        ...prev,
        {
          product,
          presentation,
          quantity: 1,
          subtotal: presentation.sale_price,
        },
      ];
    });
  };

  const removeFromCart = (product: Product, presentation: Presentation) => {
    setCartProducts((prev) => {
      return prev.filter((item) => {
        return !(item.product == product && item.presentation == presentation);
      });
    });
  };

  const [selling, setSelling] = useState<boolean>(false);

  const updateCart = (
    item: CartProduct,
    quantity: number,
    subTotal: number
  ) => {
    setCartProducts((prev) => {
      return prev.map((prevItem) => {
        if (
          prevItem.product == item.product &&
          prevItem.presentation == item.presentation
        ) {
          return {
            ...prevItem,
            quantity,
            subtotal: subTotal,
          };
        }
        return prevItem;
      });
    });
  };

  const { Text, Title } = Typography;

  const cartForm = useFormik({
    initialValues: {
      name: "",
      nit: "",
      cart: [],
    },
    validate: (values) => {
      const errors: any = {};

      if (!values.name) {
        errors.name = "El campo Nombre es obligatorio";
      }
      if (!values.nit) {
        errors.nit = "El campo NIT es obligatorio";
      }
      if (values.nit.toString().length != 9) {
        errors.nit = "El campo NIT debe tener 9 dígitos";
      }

      if (cartProducts.length == 0) {
        errors.cart = "El carrito está vacío";
      }

      return errors;
    },
    onSubmit: async (values) => {
      console.log(values);
    },
    validateOnChange: true,
  });

  const { setFieldValue } = cartForm;

  useEffect(() => {
    setFieldValue("cart", cartProducts);
  }, [cartProducts, setFieldValue]);

  return (
    <>
      <Head>
        <title>Ventas - {pageTitle}</title>

        <meta name="description" content="Generated by create next app" />
        <link rel="icon" type="image/png" href="/favicon.png" />
      </Head>
      <Header />
      <div className="w-full flex flex-col items-center">
        {mounted && (
          <div className="container mb-8">
            {isLoggedIn ? (
              <>
                <div className="h-16 flex items-center w-full">
                  <Breadcrumb>
                    <Breadcrumb.Item>
                      <Link href="/">
                        <a>Inicio</a>
                      </Link>
                    </Breadcrumb.Item>
                    <Breadcrumb.Item>
                      <Link href="/sales">
                        <a>Ventas</a>
                      </Link>
                    </Breadcrumb.Item>
                    <Breadcrumb.Item>
                      <Link href="/sales/new">
                        <a>Nueva venta</a>
                      </Link>
                    </Breadcrumb.Item>
                  </Breadcrumb>
                </div>

                <div className="flex justify-between mt-5 gap-20 flex-col-reverse lg:flex-row">
                  <div className="w-full md:w-[30rem]">
                    <Title level={2}>Inventario</Title>
                    <Text>Busca y agrega productos al carrito de compras.</Text>

                    <div className="flex flex-wrap gap-4 max-h-[600px] overflow-y-auto py-5 px-2 mt-8">
                      {!loadingProducts && (
                        <>
                          {products.map((product, index) => {
                            return product.presentations.map(
                              (presentation, index2) => {
                                return (
                                  <div key={`${index}-${index2}`}>
                                    <ProductCard
                                      product={product}
                                      addToCart={() => {
                                        addToCart(product, presentation);
                                      }}
                                      removeFromCart={() => {
                                        removeFromCart(product, presentation);
                                      }}
                                      presentation={presentation}
                                    />
                                  </div>
                                );
                              }
                            );
                          })}
                        </>
                      )}
                    </div>
                  </div>
                  <div className="w-full lg:w-8/12">
                    <div className="flex items-center gap-2">
                      <Title level={2}>Carrito de compras</Title>

                      <Badge count={cartProducts.length || 0}>
                        <ShoppingCartOutlined className="text-4xl mb-[0.938rem]" />
                      </Badge>
                    </div>
                    <Text>
                      Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                      Proin sed rutrum nisl.{" "}
                    </Text>
                    <div className="mt-8 max-h-[600px] min-h-[400px]  overflow-auto">
                      <List
                        size="large"
                        header={
                          <>
                            <div className="flex gap-2 w-full">
                              <div className="flex flex-col w-[60%]">
                                <Input
                                  disabled={selling}
                                  status={
                                    cartForm.touched.name &&
                                    cartForm.errors.name
                                      ? "error"
                                      : undefined
                                  }
                                  type={"text"}
                                  name="name"
                                  size="large"
                                  placeholder="Nombre"
                                  prefix={<UserOutlined />}
                                  onChange={cartForm.handleChange}
                                  value={cartForm.values.name}
                                />
                                <Text className="!text-red-600 mt-1 h-[22px]">
                                  {cartForm.touched.name && cartForm.errors.name
                                    ? cartForm.errors.name
                                    : undefined}
                                </Text>
                              </div>
                              <div className="flex flex-col w-[40%]">
                                <Input
                                  disabled={selling}
                                  status={
                                    cartForm.touched.nit && cartForm.errors.nit
                                      ? "error"
                                      : undefined
                                  }
                                  type={"number"}
                                  name="nit"
                                  size="large"
                                  placeholder="NIT"
                                  prefix={<IdcardOutlined />}
                                  showCount
                                  maxLength={9}
                                  onChange={cartForm.handleChange}
                                  value={cartForm.values.nit}
                                />
                                <Text className="!text-red-600 mt-1 h-[22px]">
                                  {cartForm.touched.nit && cartForm.errors.nit
                                    ? cartForm.errors.nit
                                    : undefined}
                                </Text>
                              </div>
                            </div>
                            <div>
                              <Title level={4}>
                                Total:{" "}
                                {formatCurrency(
                                  cartProducts.reduce((prev, curr) => {
                                    return prev + curr.subtotal;
                                  }, 0)
                                )}
                              </Title>
                            </div>
                          </>
                        }
                        footer={
                          <div className="w-full flex flex-col">
                            <div>
                              <Text className="!text-red-600 mt-1 h-[22px]">
                                {cartForm.touched && cartForm.errors.cart
                                  ? cartForm.errors.cart
                                  : undefined}
                              </Text>
                            </div>
                            <div className="w-full flex justify-end">
                              <Button
                                size="large"
                                icon={<CreditCardOutlined />}
                                loading={selling}
                                onClick={() => {
                                  cartForm.handleSubmit();
                                }}
                              >
                                Finalizar compra
                              </Button>
                            </div>
                          </div>
                        }
                        bordered
                        locale={{ emptyText: "No hay productos en el carrito" }}
                        dataSource={cartProducts || []}
                        renderItem={(item: CartProduct) => (
                          <List.Item>
                            <CartItem
                              item={item}
                              onChange={(e) => {
                                updateCart(item, e.quantity, e.subTotal);
                              }}
                            />
                          </List.Item>
                        )}
                      />
                    </div>
                  </div>
                </div>
              </>
            ) : (
              <div className="flex justify-center items-center w-full min-h-[calc(100vh-4rem)]">
                <AccessDenied />
              </div>
            )}
          </div>
        )}
      </div>
    </>
  );
};

export default NewSale;
